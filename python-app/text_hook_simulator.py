#!/usr/bin/env python3
"""
Text Hook Simulator
‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Dalamud text hook ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå italic text
"""

import os
import sys
import json
import time
import threading
import logging
from datetime import datetime
import win32pipe
import win32file
import win32api

# Add current directory to path
sys.path.append(os.path.dirname(__file__))

class TextHookSimulator:
    """‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Dalamud text hook"""

    def __init__(self):
        self.pipe_name = r'\\.\pipe\mbb_dalamud_bridge'
        self.running = False
        self.test_messages = []
        self.current_index = 0

        # Setup logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)

        # Initialize test messages
        self.init_test_messages()

    def init_test_messages(self):
        """‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢"""

        self.test_messages = [
            {
                "Type": "dialogue",
                "Speaker": "Alphinaud",
                "Message": "We must *proceed* with caution.",
                "Context": "Basic italic test"
            },
            {
                "Type": "dialogue",
                "Speaker": "Wuk Lamat",
                "Message": "‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß Calyx ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏û‡∏ß‡∏Å*‡πÄ‡∏£‡∏≤*‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Ç‡∏≤‡πÄ‡∏≠‡∏á",
                "Context": "Thai with italic"
            },
            {
                "Type": "dialogue",
                "Speaker": "Y'shtola",
                "Message": "The *ancient* magic is *powerful* indeed.",
                "Context": "Multiple italic words"
            },
            {
                "Type": "dialogue",
                "Speaker": "Thancred",
                "Message": "*Everything* depends on our next move.",
                "Context": "Entire word italic"
            },
            {
                "Type": "narrative",
                "Speaker": "",
                "Message": "The *mysterious* figure approaches you with *urgent* news.",
                "Context": "Narrative with italic"
            },
            {
                "Type": "dialogue",
                "Speaker": "Krile",
                "Message": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° *‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç* ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á *‡∏à‡∏î‡∏à‡∏≥* ‡πÑ‡∏ß‡πâ",
                "Context": "Thai dialogue with multiple italic"
            },
            {
                "Type": "dialogue",
                "Speaker": "Gulool Ja",
                "Message": "Normal text without any special formatting at all.",
                "Context": "Control test - no italic"
            },
            {
                "Type": "dialogue",
                "Speaker": "Estinien",
                "Message": "Mix of *English* and *‡πÑ‡∏ó‡∏¢* text together.",
                "Context": "Mixed language italic"
            },
            {
                "Type": "choice",
                "Speaker": "",
                "Message": "Choose: *Accept* the quest or *decline* politely?",
                "Context": "Choice dialog with italic"
            },
            {
                "Type": "dialogue",
                "Speaker": "Test Character",
                "Message": "Edge case: **double asterisk** and *normal* and ***triple***",
                "Context": "Edge case testing"
            }
        ]

        self.logger.info(f"üìù Initialized {len(self.test_messages)} test messages")

    def create_named_pipe_server(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Named Pipe Server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏•‡∏≠‡∏á Dalamud Bridge"""

        try:
            self.logger.info(f"üîß Creating named pipe: {self.pipe_name}")

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á named pipe
            pipe_handle = win32pipe.CreateNamedPipe(
                self.pipe_name,
                win32pipe.PIPE_ACCESS_DUPLEX,
                win32pipe.PIPE_TYPE_MESSAGE | win32pipe.PIPE_READMODE_MESSAGE | win32pipe.PIPE_WAIT,
                1,  # max instances
                65536,  # out buffer size
                65536,  # in buffer size
                0,  # default timeout
                None  # security attributes
            )

            if pipe_handle == win32file.INVALID_HANDLE_VALUE:
                self.logger.error("‚ùå Failed to create named pipe")
                return None

            self.logger.info("‚úÖ Named pipe created successfully")
            return pipe_handle

        except Exception as e:
            self.logger.error(f"‚ùå Named pipe creation error: {e}")
            return None

    def wait_for_connection(self, pipe_handle):
        """‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å MBB client"""

        try:
            self.logger.info("‚è≥ Waiting for MBB client connection...")

            # ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            win32pipe.ConnectNamedPipe(pipe_handle, None)
            self.logger.info("‚úÖ MBB client connected!")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå Connection wait error: {e}")
            return False

    def send_message(self, pipe_handle, message_data):
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô named pipe"""

        try:
            # Convert to JSON
            json_data = json.dumps(message_data, ensure_ascii=False)
            message_bytes = json_data.encode('utf-8')

            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            win32file.WriteFile(pipe_handle, message_bytes)
            self.logger.info(f"üì§ Sent: {message_data['Message'][:50]}...")

            return True

        except Exception as e:
            self.logger.error(f"‚ùå Send message error: {e}")
            return False

    def run_simulation(self, auto_mode=False, delay=3):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á text hook"""

        self.running = True
        self.logger.info("üöÄ Starting Text Hook Simulation...")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á named pipe
        pipe_handle = self.create_named_pipe_server()
        if not pipe_handle:
            return

        try:
            # ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            if not self.wait_for_connection(pipe_handle):
                return

            if auto_mode:
                self.run_auto_simulation(pipe_handle, delay)
            else:
                self.run_manual_simulation(pipe_handle)

        except KeyboardInterrupt:
            self.logger.info("‚èπÔ∏è Simulation stopped by user")

        except Exception as e:
            self.logger.error(f"‚ùå Simulation error: {e}")

        finally:
            # ‡∏õ‡∏¥‡∏î pipe
            try:
                win32file.CloseHandle(pipe_handle)
                self.logger.info("üîí Named pipe closed")
            except:
                pass

            self.running = False

    def run_auto_simulation(self, pipe_handle, delay):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""

        self.logger.info(f"üîÑ Auto simulation mode (delay: {delay}s)")

        for i, message in enumerate(self.test_messages):
            if not self.running:
                break

            self.logger.info(f"üì® Sending message {i+1}/{len(self.test_messages)}")
            self.logger.info(f"üéØ Context: {message['Context']}")

            if not self.send_message(pipe_handle, message):
                break

            if i < len(self.test_messages) - 1:  # ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                time.sleep(delay)

        self.logger.info("‚úÖ Auto simulation completed")

    def run_manual_simulation(self, pipe_handle):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö manual"""

        self.logger.info("üéÆ Manual simulation mode")
        self.logger.info("Commands: 'next', 'prev', 'send', 'list', 'quit'")

        while self.running:
            try:
                command = input(f"\n[{self.current_index+1}/{len(self.test_messages)}] > ").strip().lower()

                if command == 'quit' or command == 'q':
                    break

                elif command == 'next' or command == 'n':
                    self.current_index = (self.current_index + 1) % len(self.test_messages)
                    self.show_current_message()

                elif command == 'prev' or command == 'p':
                    self.current_index = (self.current_index - 1) % len(self.test_messages)
                    self.show_current_message()

                elif command == 'send' or command == 's':
                    message = self.test_messages[self.current_index]
                    self.send_message(pipe_handle, message)

                elif command == 'list' or command == 'l':
                    self.list_all_messages()

                elif command == 'help' or command == 'h':
                    self.show_help()

                elif command == '':
                    self.show_current_message()

                else:
                    print(f"Unknown command: {command}")

            except KeyboardInterrupt:
                break

            except EOFError:
                break

    def show_current_message(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        message = self.test_messages[self.current_index]
        print(f"\n--- Message {self.current_index+1}/{len(self.test_messages)} ---")
        print(f"Context: {message['Context']}")
        print(f"Speaker: {message['Speaker']}")
        print(f"Message: {message['Message']}")
        print(f"Type: {message['Type']}")

    def list_all_messages(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("\n--- All Test Messages ---")
        for i, message in enumerate(self.test_messages):
            marker = ">" if i == self.current_index else " "
            print(f"{marker} {i+1:2d}. [{message['Type']}] {message['Context']}")

    def show_help(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
        print("\n--- Commands ---")
        print("next/n    - Next message")
        print("prev/p    - Previous message")
        print("send/s    - Send current message")
        print("list/l    - List all messages")
        print("help/h    - Show this help")
        print("quit/q    - Quit simulation")
        print("Enter     - Show current message")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏´‡∏•‡∏±‡∏Å"""

    print("=" * 60)
    print("üé£ TEXT HOOK SIMULATOR")
    print("=" * 60)
    print("This simulator acts as a Dalamud text hook sender")
    print("It creates a named pipe and sends test messages to MBB")
    print("=" * 60)

    simulator = TextHookSimulator()

    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å command line
    if len(sys.argv) > 1:
        if sys.argv[1] == 'auto':
            delay = 3
            if len(sys.argv) > 2:
                try:
                    delay = int(sys.argv[2])
                except ValueError:
                    print(f"Invalid delay value: {sys.argv[2]}, using default: 3")

            print(f"üîÑ Running in AUTO mode (delay: {delay}s)")
            print("üéØ Make sure MBB is running first!")
            input("Press Enter when MBB is ready...")

            simulator.run_simulation(auto_mode=True, delay=delay)

        else:
            print(f"Unknown parameter: {sys.argv[1]}")
            print("Usage: python text_hook_simulator.py [auto [delay]]")

    else:
        print("üéÆ Running in MANUAL mode")
        print("üéØ Make sure MBB is running first!")
        input("Press Enter when MBB is ready...")

        simulator.run_simulation(auto_mode=False)

    print("üëã Text Hook Simulator finished")

if __name__ == "__main__":
    main()