"""
üé≠ NPC Dialogue Simulator - Real Translation Comparison
‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠ vs ‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
Version: 2.0
"""

import tkinter as tk
from tkinter import ttk, font
import json
import os
import threading
import time
from datetime import datetime
from npc_file_utils import get_npc_file_path

class DialogueSimulator:
    def __init__(self, parent=None, translator=None):
        self.parent = parent
        self.window = None
        self.current_character = None
        self.translator = translator
        self.font_family = "IBM Plex Sans Thai"
        self.font_size = 14
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å settings.json
        self.load_font_settings()
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á
        self.dialogue_scenarios = {
            "scholarly": {
                "title": "üìö ‡∏ô‡∏±‡∏Å‡∏õ‡∏£‡∏≤‡∏ä‡∏ç‡πå",
                "dialogues": [
                    "This is no different from the teleportation magicks to which we are all accustomed‚îÄmagicks that allow for the transportation of those inanimate objects one considers to be an extension of oneself.",
                    "A facility for processing souls... As distressing as the very concept is, I confess I'm curious to see the technology employed.",
                    "It was forsaken in the wake of the Flood, but a certain Nu Mou chose to make their home there soon after."
                ]
            },
            "surprised": {
                "title": "üòÆ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏´‡∏•‡∏≤‡∏î‡πÉ‡∏à", 
                "dialogues": [
                    "Excuse me, but...you're Wuk Lamat, are you not? I hadn't thought to encounter one of the Dawn's Promise here of all places..."
                ]
            },
            "mystical": {
                "title": "‚ú® ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå",
                "dialogues": [
                    "The aether here flows differently... as if guided by an unseen hand.",
                    "I sense a disturbance in the very fabric of reality itself.",
                    "These ancient magicks speak of powers beyond mortal comprehension."
                ]
            }
        }
        
        self.current_scenario = "scholarly"
        self.current_dialogue_index = 0
        self.translation_results = {}
        
    def load_font_settings(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å settings.json"""
        try:
            with open("settings.json", "r", encoding="utf-8") as f:
                settings = json.load(f)
                font_file = settings.get("font", "IBM Plex Sans Thai Medium.ttf")
                self.font_family = font_file.replace(".ttf", "").replace("Medium", "").strip()
                self.font_size = int(settings.get("font_size", 24) * 0.6)
        except:
            pass
            
    def show(self, character_name=None, translator=None):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Dialogue Simulator"""
        if self.window and self.window.winfo_exists():
            self.window.lift()
            return
            
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏à‡∏≤‡∏Å npc.json ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        self.current_character = None
        if character_name:
            self.current_character = self.load_character_from_npc(character_name)
            
        if translator:
            self.translator = translator
            
        self.create_window()
        
    def load_character_from_npc(self, character_name):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏à‡∏≤‡∏Å npc.json"""
        try:
            npc_path = get_npc_file_path()
            if not npc_path or not os.path.exists(npc_path):
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏à‡∏≤‡∏Å utils ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                npc_path = "npc.json"
                
            print(f"Loading character from: {npc_path}")
            
            with open(npc_path, "r", encoding="utf-8") as f:
                data = json.load(f)
                
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô main_characters)
            for char in data.get("main_characters", []):
                if char.get("firstName") == character_name:
                    print(f"‚úì Found character in npc.json: {character_name}")
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° style ‡∏à‡∏≤‡∏Å character_roles
                    character_roles = data.get("character_roles", {})
                    if character_name in character_roles:
                        char["style"] = character_roles[character_name]
                        print(f"‚úì Found character style: {char['style']}")
                    
                    return char
                    
            print(f"‚úó Character not found in npc.json: {character_name}")
            return None
            
        except Exception as e:
            print(f"Error loading character from npc.json: {e}")
            return None
        
    def create_window(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å"""
        self.window = tk.Toplevel(self.parent if self.parent else None)
        self.window.title("üé≠ NPC Dialogue Simulator - Real Translation Test")
        self.window.geometry("1200x1040")  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏à‡∏≠
        self.window.configure(bg="#1e1e1e")
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πÑ‡∏ï‡∏•‡πå
        self.setup_styles()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á UI
        self.create_ui()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        if self.current_character and self.translator:
            self.start_translation()
        
    def setup_styles(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ttk widgets"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Frame
        style.configure("Dark.TFrame", background="#1e1e1e")
        style.configure("Card.TFrame", background="#2d2d30", relief="flat", borderwidth=1)
        
        # ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Label (‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏à‡∏≠)
        style.configure("Title.TLabel", background="#1e1e1e", foreground="#ffffff", 
                       font=(self.font_family, 20, "bold"))  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î
        style.configure("Subtitle.TLabel", background="#2d2d30", foreground="#cccccc",
                       font=(self.font_family, 14))  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î
        style.configure("Info.TLabel", background="#1e1e1e", foreground="#38bdf8",
                       font=(self.font_family, 12))  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î
        style.configure("CharName.TLabel", background="#1e1e1e", foreground="#38bdf8",
                       font=(self.font_family, 28, "bold"))  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
                       
    def create_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏´‡∏•‡∏±‡∏Å"""
        # Header ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        header_frame = ttk.Frame(self.window, style="Dark.TFrame")
        header_frame.pack(fill="x", padx=15, pady=(15, 8))
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö title ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        title_char_frame = tk.Frame(header_frame, bg="#1e1e1e")
        title_char_frame.pack(fill="x")
        
        # Title ‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢
        title_label = tk.Label(title_char_frame, text="üé≠ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á", 
                            font=(self.font_family, 18, "bold"), fg="#ffffff", bg="#1e1e1e")
        title_label.pack(side="left")
        
        # ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ (‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏á)
        if self.current_character:
            char_name = self.current_character.get('firstName', self.current_character.get('name', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'))
            if self.current_character.get('lastName'):
                char_name += f" {self.current_character['lastName']}"
            char_name_label = tk.Label(title_char_frame, text=char_name, 
                                     font=(self.font_family, 24, "bold"), fg="#38bdf8", bg="#1e1e1e")
            char_name_label.pack(side="right")
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        if self.current_character:
            char_info = f"‡πÄ‡∏û‡∏®: {self.current_character.get('gender', '')}"
            if self.current_character.get('role'):
                char_info += f" | ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: {self.current_character['role']}"
            if self.current_character.get('relationship'):
                char_info += f" | ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå: {self.current_character['relationship']}"
            
            char_info_label = tk.Label(header_frame, text=char_info, 
                                     font=(self.font_family, 11), fg="#38bdf8", bg="#1e1e1e")
            char_info_label.pack(anchor="w", pady=(3, 0))
            
            # ‡πÅ‡∏™‡∏î‡∏á style ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
            if self.current_character.get('style'):
                style_info = f"üìù ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î: {self.current_character['style']}"
                style_label = tk.Label(header_frame, text=style_info, 
                                     font=(self.font_family, 11), fg="#38bdf8", bg="#1e1e1e")
                style_label.pack(anchor="w", pady=(1, 0))
        else:
            no_char_label = tk.Label(header_frame, text="‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å - ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô", 
                                 font=(self.font_family, 11), fg="#38bdf8", bg="#1e1e1e")
            no_char_label.pack(anchor="w", pady=(3, 0))
        
        # Scenario selector
        scenario_frame = ttk.Frame(self.window, style="Dark.TFrame")
        scenario_frame.pack(fill="x", padx=15, pady=8)
        
        ttk.Label(scenario_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤:", 
                 style="Subtitle.TLabel").pack(side="left", padx=(0, 8))
        
        # ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏µ
        self.scenario_buttons = {}
        
        for key, scenario in self.dialogue_scenarios.items():
            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            dialogue_count = len(scenario["dialogues"])
            button_text = f"{scenario['title']}\n({dialogue_count} dialogs)"
            
            btn = tk.Button(
                scenario_frame,
                text=button_text,
                font=(self.font_family, 8),  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ 2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
                bg="#8B5CF6" if key == self.current_scenario else "#3d3d40",
                fg="white",
                bd=0,
                padx=10,
                pady=6,
                justify="center",  # ‡∏à‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
                activebackground="#9F7AEA",  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover
                command=lambda k=key: self.switch_scenario(k)
            )
            btn.pack(side="left", padx=2)
            self.scenario_buttons[key] = btn  # ‡πÄ‡∏Å‡πá‡∏ö reference
        
        # Navigation buttons
        nav_frame = ttk.Frame(scenario_frame, style="Dark.TFrame")
        nav_frame.pack(side="right")
        
        self.prev_btn = tk.Button(
            nav_frame,
            text="‚óÄ ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤",
            font=(self.font_family, 9),  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î
            bg="#3d3d40",
            fg="white",
            bd=0,
            padx=8,
            pady=4,
            activebackground="#4a4a4a",  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover
            command=self.previous_dialogue
        )
        self.prev_btn.pack(side="left", padx=2)
        
        self.next_btn = tk.Button(
            nav_frame,
            text="‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚ñ∂",
            font=(self.font_family, 9),  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î
            bg="#3d3d40",
            fg="white",
            bd=0,
            padx=8,
            pady=4,
            activebackground="#4a4a4a",  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover
            command=self.next_dialogue
        )
        self.next_btn.pack(side="left", padx=2)
        
        # Main content area
        self.content_frame = ttk.Frame(self.window, style="Dark.TFrame")
        self.content_frame.pack(fill="both", expand=True, padx=15, pady=8)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        self.create_comparison_area()
        
        # Status bar
        self.status_frame = ttk.Frame(self.window, style="Dark.TFrame")
        self.status_frame.pack(fill="x", padx=15, pady=(0, 15))
        
        self.status_label = ttk.Label(
            self.status_frame,
            text="‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏õ‡∏•...",
            style="Info.TLabel"
        )
        self.status_label.pack(anchor="w")
        
    def create_comparison_area(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•"""
        # Clear existing content
        for widget in self.content_frame.winfo_children():
            widget.destroy()
        
        # Original text section
        original_frame = ttk.Frame(self.content_frame, style="Card.TFrame")
        original_frame.pack(fill="x", pady=(0, 8))
        
        tk.Label(original_frame, text="üìù ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©",
                font=(self.font_family, 14, "bold"),  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î
                bg="#2d2d30", fg="#ffffff").pack(anchor="w", padx=15, pady=(8, 3))
        
        current_dialogue = self.get_current_dialogue()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        if self.current_character:
            char_name = self.current_character.get('firstName', self.current_character.get('name', ''))
            if self.current_character.get('lastName'):
                char_name += f" {self.current_character['lastName']}"
            if char_name:
                char_header = tk.Label(original_frame, text=f"{char_name}:",
                                     font=(self.font_family, 16, "bold"),  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠
                                     bg="#2d2d30", fg="#38bdf8")
                char_header.pack(anchor="w", padx=15, pady=(3, 3))
        
        self.original_text = tk.Label(
            original_frame,
            text=f'"{current_dialogue}"',
            font=(self.font_family, 13),  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            bg="#2d2d30",
            fg="#ffffff",
            wraplength=1150,
            justify="left"
        )
        self.original_text.pack(anchor="w", padx=15, pady=(3, 10))
        
        # Comparison grid
        compare_frame = ttk.Frame(self.content_frame, style="Dark.TFrame")
        compare_frame.pack(fill="both", expand=True)
        
        # Configure grid
        compare_frame.grid_columnconfigure(0, weight=1)
        compare_frame.grid_columnconfigure(1, weight=1)
        
        # BEFORE - ‡πÅ‡∏õ‡∏•‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠
        before_frame = tk.Frame(compare_frame, bg="#3d2d2d", highlightthickness=1,
                               highlightbackground="#ff6b6b")
        before_frame.grid(row=0, column=0, sticky="nsew", padx=(0, 3), pady=3)
        
        tk.Label(before_frame, text="‚ùå ‡πÅ‡∏õ‡∏•‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£",
                font=(self.font_family, 14, "bold"),  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î
                bg="#3d2d2d", fg="#ff6b6b").pack(anchor="w", padx=15, pady=(8, 3))
        
        tk.Label(before_frame, text="(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏®, ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó, ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å)",
                font=(self.font_family, 10),  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î
                bg="#3d2d2d", fg="#999999").pack(anchor="w", padx=15, pady=(0, 5))
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Scrollbar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Text
        text_frame_before = tk.Frame(before_frame, bg="#3d2d2d")
        text_frame_before.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        self.before_text = tk.Text(
            text_frame_before,
            font=(self.font_family, 24),  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô 24
            bg="#3d2d2d",
            fg="#ffffff",
            wrap="word",
            height=8,  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô scrollbar ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            padx=10,
            pady=8,
            relief="flat",
            bd=0
        )
        
        scrollbar_before = tk.Scrollbar(text_frame_before, command=self.before_text.yview,
                                       bg="#3d2d2d", troughcolor="#2d2d2d", 
                                       activebackground="#ff6b6b", width=15)
        self.before_text.config(yscrollcommand=scrollbar_before.set)
        
        self.before_text.pack(side="left", fill="both", expand=True)
        scrollbar_before.pack(side="right", fill="y")
        self.before_text.insert("1.0", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•...")
        self.before_text.config(state="disabled")
        
        # AFTER - ‡πÅ‡∏õ‡∏•‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÄ‡∏ï‡πá‡∏°
        after_frame = tk.Frame(compare_frame, bg="#2d3d2d", highlightthickness=1,
                              highlightbackground="#4ade80")
        after_frame.grid(row=0, column=1, sticky="nsew", padx=(3, 0), pady=3)
        
        tk.Label(after_frame, text="‚úÖ ‡πÅ‡∏õ‡∏•‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö",
                font=(self.font_family, 14, "bold"),  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î
                bg="#2d3d2d", fg="#4ade80").pack(anchor="w", padx=15, pady=(8, 3))
        
        context_info = "(‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô)"
        if self.current_character:
            context_items = []
            if self.current_character.get('gender'):
                context_items.append("‡πÄ‡∏û‡∏®")
            if self.current_character.get('role'):
                context_items.append("‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó")
            if self.current_character.get('notes'):
                context_items.append("‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å")
            if context_items:
                context_info = f"(‡∏°‡∏µ: {', '.join(context_items)})"
        
        tk.Label(after_frame, text=context_info,
                font=(self.font_family, 10),
                bg="#2d3d2d", fg="#999999").pack(anchor="w", padx=15, pady=(0, 5))
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Scrollbar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Text ‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤
        text_frame_after = tk.Frame(after_frame, bg="#2d3d2d")
        text_frame_after.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        self.after_text = tk.Text(
            text_frame_after,
            font=(self.font_family, 24),  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô 24
            bg="#2d3d2d",
            fg="#ffffff",
            wrap="word",
            height=8,  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô scrollbar ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            padx=10,
            pady=8,
            relief="flat",
            bd=0
        )
        
        scrollbar_after = tk.Scrollbar(text_frame_after, command=self.after_text.yview,
                                      bg="#2d3d2d", troughcolor="#1d2d1d", 
                                      activebackground="#4ade80", width=15)
        self.after_text.config(yscrollcommand=scrollbar_after.set)
        
        self.after_text.pack(side="left", fill="both", expand=True)
        scrollbar_after.pack(side="right", fill="y")
        self.after_text.insert("1.0", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•...")
        self.after_text.config(state="disabled")
        
    def get_current_dialogue(self):
        """‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        dialogues = self.dialogue_scenarios[self.current_scenario]["dialogues"]
        return dialogues[self.current_dialogue_index]
        
    def switch_scenario(self, scenario_key):
        """‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"""
        self.current_scenario = scenario_key
        self.current_dialogue_index = 0
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á highlight ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        if hasattr(self, 'scenario_buttons'):
            for key, btn in self.scenario_buttons.items():
                if key == scenario_key:
                    btn.config(bg="#8B5CF6")  # ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                else:
                    btn.config(bg="#3d3d40")  # ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        
        self.create_comparison_area()
        self.start_translation()
        
    def next_dialogue(self):
        """‡πÑ‡∏õ‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"""
        dialogues = self.dialogue_scenarios[self.current_scenario]["dialogues"]
        self.current_dialogue_index = (self.current_dialogue_index + 1) % len(dialogues)
        self.create_comparison_area()
        self.start_translation()
        
    def previous_dialogue(self):
        """‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤"""
        dialogues = self.dialogue_scenarios[self.current_scenario]["dialogues"]
        self.current_dialogue_index = (self.current_dialogue_index - 1) % len(dialogues)
        self.create_comparison_area()
        self.start_translation()
        
    def start_translation(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÅ‡∏ö‡∏ö async"""
        if not self.translator:
            self.update_status("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Translator - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏à‡∏≤‡∏Å NPC Manager")
            return
            
        # ‡πÅ‡∏õ‡∏•‡πÉ‡∏ô thread ‡πÅ‡∏¢‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ UI ‡∏Ñ‡πâ‡∏≤‡∏á
        thread = threading.Thread(target=self.perform_translation)
        thread.daemon = True
        thread.start()
        
    def perform_translation(self):
        """‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏à‡∏£‡∏¥‡∏á"""
        dialogue = self.get_current_dialogue()
        char_name = self.current_character.get('name', '') if self.current_character else ''
        
        # Prepare dialogue with character name
        if char_name:
            dialogue_with_name = f"{char_name}: {dialogue}"
        else:
            dialogue_with_name = dialogue
            
        try:
            self.update_status("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠...")
            
            # ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÅ‡∏ö‡∏ö BEFORE (‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠)
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á minimal context
            minimal_context = {
                "text": dialogue_with_name,
                "character_names": [char_name] if char_name else [],
                "use_minimal": True  # flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ context ‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            }
            
            # Mock translation for BEFORE (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á)
            # ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å translator ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà context
            before_translation = self.translate_minimal(dialogue_with_name)
            
            self.update_translation_display("before", before_translation)
            
            self.update_status("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö...")
            
            # ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÅ‡∏ö‡∏ö AFTER (‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÄ‡∏ï‡πá‡∏°)
            if self.current_character:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á full context
                full_context = self.build_full_context(dialogue, self.current_character)
                after_translation = self.translate_with_context(dialogue_with_name, full_context)
            else:
                after_translation = before_translation  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πá‡πÅ‡∏õ‡∏•‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
                
            self.update_translation_display("after", after_translation)
            
            self.update_status("‚úÖ ‡πÅ‡∏õ‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!")
            
        except Exception as e:
            self.update_status(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            print(f"Translation error: {e}")
            
    def translate_minimal(self, text):
        """‡πÅ‡∏õ‡∏•‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ context ‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠)"""
        if self.translator and hasattr(self.translator, 'translate'):
            try:
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ translator ‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà context NPC
                # ‡πÅ‡∏ï‡πà‡πÉ‡∏™‡πà‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
                result = self.translator.translate(text)
                return result if result else "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡πÑ‡∏î‡πâ"
            except Exception as e:
                print(f"Error in minimal translation: {e}")
                return self._get_fallback_translation(text, "minimal")
        else:
            # Fallback translation ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ translator
            return self._get_fallback_translation(text, "minimal")
            
    def translate_with_context(self, text, context):
        """‡πÅ‡∏õ‡∏•‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"""
        if self.translator and hasattr(self.translator, 'translate'):
            try:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á enhanced prompt ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏ï‡πá‡∏°
                gender = context.get("gender", "")
                role = context.get("role", "")
                style = context.get("style", "")  # ‡πÉ‡∏ä‡πâ style ‡∏à‡∏≤‡∏Å character_roles
                relationship = context.get("relationship", "")
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á context prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•
                context_prompt = f"‡πÅ‡∏õ‡∏•‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: "
                if gender:
                    context_prompt += f"‡πÄ‡∏û‡∏®{gender} "
                if role:
                    context_prompt += f"‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: {role} "
                if relationship:
                    context_prompt += f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå: {relationship} "
                if style:
                    context_prompt += f"‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î: {style} "
                
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ translator ‡∏û‡∏£‡πâ‡∏≠‡∏° context
                enhanced_text = f"{context_prompt}\n{text}"
                result = self.translator.translate(enhanced_text)
                return result if result else "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡πÑ‡∏î‡πâ"
                
            except Exception as e:
                print(f"Error in context translation: {e}")
                return self._get_fallback_translation(text, "context", context)
        else:
            # Fallback translation ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ translator
            return self._get_fallback_translation(text, "context", context)
            
    def _get_fallback_translation(self, text, mode="minimal", context=None):
        """Fallback translation ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ translator API"""
        # Mock translations for demonstration
        if mode == "minimal":
            if "Good morning" in text:
                return "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤! ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ‡∏à‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
            elif "You dare stand" in text:
                return "‡πÄ‡∏à‡πâ‡∏≤‡∏Å‡∏•‡πâ‡∏≤‡∏°‡∏≤‡∏Ç‡∏ß‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏Ç‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠? ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÑ‡∏ß‡πâ!"
            elif "cannot believe" in text:
                return "‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏¢‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô... ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô!"
            else:
                return "‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô..."
        
        elif mode == "context" and context:
            gender = context.get("gender", "").lower()
            role = context.get("role", "").lower()
            notes = context.get("notes", "").lower()
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡∏ï‡∏≤‡∏° context
            if "Good morning" in text:
                if gender == "female":
                    if "noble" in role or "princess" in role:
                        return "‡∏≠‡∏£‡∏∏‡∏ì‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå‡∏Ñ‡πà‡∏∞~ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡∏ä‡πà‡∏≤‡∏á‡∏™‡∏î‡πÉ‡∏™‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô ‚ú®"
                    else:
                        return "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏î‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞"
                elif gender == "male":
                    if "knight" in role or "warrior" in role:
                        return "‡∏Ç‡∏≠‡∏Ñ‡∏≤‡∏£‡∏ß‡∏∞ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡πâ‡∏≤‡∏ä‡πà‡∏≤‡∏á‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™‡∏¢‡∏¥‡πà‡∏á‡∏ô‡∏±‡∏Å"
                    else:
                        return "‡∏≠‡∏£‡∏∏‡∏ì‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢"
                        
            elif "You dare stand" in text:
                if gender == "female":
                    if "villain" in role or "antagonist" in notes:
                        return "‡πÄ‡∏à‡πâ‡∏≤‡∏Å‡∏•‡πâ‡∏≤‡∏î‡∏µ‡∏¢‡∏¥‡πà‡∏á‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏ß‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏Ç‡πâ‡∏≤... ‡∏à‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏ö‡∏Å‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏à‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤! üíÄ"
                    else:
                        return "‡∏ó‡πà‡∏≤‡∏ô‡∏Ñ‡∏¥‡∏î‡∏à‡∏∞‡∏Ç‡∏ß‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∞? ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏î‡πâ‡∏ß‡∏¢!"
                elif gender == "male":
                    if "knight" in role:
                        return "‡πÄ‡∏à‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÑ‡∏£‡πâ‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥ ‡∏Å‡∏•‡πâ‡∏≤‡∏°‡∏≤‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏´‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≤? ‡∏à‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏ö‡∏Å‡∏±‡∏ö‡∏î‡∏≤‡∏ö‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∏‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°!"
                    else:
                        return "‡∏Å‡∏•‡πâ‡∏≤‡∏°‡∏≤‡∏Ç‡∏ß‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏Ç‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠? ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡πÑ‡∏ß‡πâ!"
                        
            elif "cannot believe" in text:
                if gender == "female":
                    if "emotional" in notes or "sensitive" in notes:
                        return "‡∏î‡∏¥‡∏â‡∏±‡∏ô... ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞... ‡∏ó‡∏≥‡πÑ‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ... ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô... üíî"
                    else:
                        return "‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á... ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤!"
                elif gender == "male":
                    if "stoic" in notes or "serious" in notes:
                        return "‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏™‡∏¥‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô... ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏°‡∏≤‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô"
                    else:
                        return "‡∏ú‡∏°‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏¢‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô... ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô!"
        
        return "‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á..."
        
    def build_full_context(self, dialogue, character_data):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•"""
        context = {
            "name": character_data.get("name", ""),
            "gender": character_data.get("gender", ""),
            "role": character_data.get("role", ""),
            "notes": character_data.get("notes", ""),
            "location": character_data.get("location", ""),
            "scenario": self.current_scenario
        }
        return context
        
    def update_translation_display(self, panel, text):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏û‡∏≤‡πÄ‡∏ô‡∏•‡πÅ‡∏õ‡∏•"""
        def update():
            if panel == "before":
                self.before_text.config(state="normal")
                self.before_text.delete("1.0", "end")
                self.before_text.insert("1.0", text)
                # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                self.before_text.see("1.0")
                self.before_text.config(state="disabled")
            else:
                self.after_text.config(state="normal")
                self.after_text.delete("1.0", "end")
                self.after_text.insert("1.0", text)
                # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                self.after_text.see("1.0")
                self.after_text.config(state="disabled")
                
        if self.window:
            self.window.after(0, update)
            
    def update_status(self, message):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï status bar"""
        def update():
            if hasattr(self, 'status_label'):
                self.status_label.config(text=message)
                
        if self.window:
            self.window.after(0, update)


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
if __name__ == "__main__":
    root = tk.Tk()
    root.withdraw()
    
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
    sample_character = {
        "name": "Y'shtola",
        "gender": "Female",
        "role": "Archon, Scholar",
        "notes": "Intelligent, serious, caring but stern",
        "location": "Sharlayan"
    }
    
    simulator = DialogueSimulator()
    simulator.show(sample_character)
    
    root.mainloop()